{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","playerPosition","setPlayerPosition","_useState3","x","y","_useState4","objectPosition","setObjectPosition","_useState5","_useState6","score","setScore","_useState7","_useState8","gameOver","setGameOver","useEffect","interval","setInterval","prevPosition","newY","Math","abs","prevScore","floor","random","_objectSpread","clearInterval","React","createElement","className","tabIndex","onKeyDown","event","key","max","min","style","left","concat","bottom","top","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"oMAuDeA,SApDH,WAAM,IAAAC,EAC4BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAAAI,EACIL,mBAAS,CAAEM,EAAG,GAAIC,EAAG,IAAIC,EAAAN,YAAAG,EAAA,GAA9DI,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAAAG,EACdX,mBAAS,GAAEY,EAAAV,YAAAS,EAAA,GAA9BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAAAG,EACUf,oBAAS,GAAMgB,EAAAd,YAAAa,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GA8B5B,OApBAG,oBAAU,WACR,IAAMC,EAAWC,YAAY,WAC3BX,EAAkB,SAACY,GACjB,IAAMC,EAAOD,EAAaf,EAAI,EAC9B,OAAIgB,EAAO,GACLC,KAAKC,IAAIH,EAAahB,EAAIH,IAAmB,IAC/Ce,GAAY,GACLI,IAEPR,EAAS,SAACY,GAAS,OAAKA,EAAY,KAC7B,CAAEpB,EAAGkB,KAAKG,MAAsB,GAAhBH,KAAKI,UAAgBrB,EAAG,IAGnDsB,YAAA,GAAYP,EAAY,CAAEf,EAAGgB,OAE9B,KAEH,OAAO,kBAAMO,cAAcV,KAC1B,CAACjB,IAEAc,EACKc,IAAAC,cAAA,OAAKC,UAAU,OAAM,0BAAwBpB,GAIpDkB,IAAAC,cAAA,OAAKC,UAAU,MAAMC,SAAS,IAAIC,UAjCjB,SAACC,GACA,cAAdA,EAAMC,IACRjC,EAAkB,SAACkB,GAAY,OAAKE,KAAKc,IAAIhB,EAAe,GAAI,KACzC,eAAdc,EAAMC,KACfjC,EAAkB,SAACkB,GAAY,OAAKE,KAAKe,IAAIjB,EAAe,GAAI,QA8BhES,IAAAC,cAAA,OACEC,UAAU,SACVO,MAAO,CAAEC,KAAI,GAAAC,OAAKvC,EAAc,KAAKwC,OAAQ,UAE/CZ,IAAAC,cAAA,OACEC,UAAU,SACVO,MAAO,CAAEC,KAAI,GAAAC,OAAKjC,EAAeH,EAAC,KAAKsC,IAAG,GAAAF,OAAKjC,EAAeF,EAAC,WCrCxDsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/B,IAAAC,cAACD,IAAMgC,WAAU,KACfhC,IAAAC,cAAClC,EAAG,QAOR+C","file":"static/js/main.493f0402.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [playerPosition, setPlayerPosition] = useState(50);\n  const [objectPosition, setObjectPosition] = useState({ x: 50, y: 0 });\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  const movePlayer = (event) => {\n    if (event.key === \"ArrowLeft\") {\n      setPlayerPosition((prevPosition) => Math.max(prevPosition - 10, 0));\n    } else if (event.key === \"ArrowRight\") {\n      setPlayerPosition((prevPosition) => Math.min(prevPosition + 10, 90));\n    }\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setObjectPosition((prevPosition) => {\n        const newY = prevPosition.y + 5;\n        if (newY > 90) {\n          if (Math.abs(prevPosition.x - playerPosition) <= 10) {\n            setGameOver(true);\n            return prevPosition;\n          } else {\n            setScore((prevScore) => prevScore + 10);\n            return { x: Math.floor(Math.random() * 90), y: 0 };\n          }\n        }\n        return { ...prevPosition, y: newY };\n      });\n    }, 200);\n\n    return () => clearInterval(interval);\n  }, [playerPosition]);\n\n  if (gameOver) {\n    return <div className=\"App\">Game Over! Your score: {score}</div>;\n  }\n\n  return (\n    <div className=\"App\" tabIndex=\"0\" onKeyDown={movePlayer}>\n      <div\n        className=\"player\"\n        style={{ left: `${playerPosition}%`, bottom: \"10px\" }}\n      ></div>\n      <div\n        className=\"object\"\n        style={{ left: `${objectPosition.x}%`, top: `${objectPosition.y}%` }}\n      ></div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}